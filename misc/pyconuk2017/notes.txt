1) Intro

2) Two years the club I help to run entered PiWars [trojan horse robot]

3) We decided to remote control the robot via a controller connected to a laptop over WiFi [SNES controller connected to laptop]

4) We had to faff around setting the Pi inside the robot as an AP with a fixed IP [image of https://learn.adafruit.com/setting-up-a-raspberry-pi-as-a-wifi-access-point?view=all]

5) But it worked... although when developing the controller code talking to localhost on my laptop I needed to mess around with the addresses / ports [two processes on one laptop / .ini file]

6) I'd always wanted an excuse to use ZeroMQ... so we did that, with a very thin wrapper of my own to make it easier for the lads at the club [C:\Users\tim\work-in-progress\westpark.github\robotics\robot\robot.py on RVW]

7) Then, last year, we decided to do a simple activity involving three Raspberry Pis talking across the network: one controlling to a disc spinning on a wheel and sensing the Nerf dart hits on two sensor flaps; one starting and stopping the turntable; and the third receiving the scores and showing the scoreboard [turntable]

8) We had three teams running over three weeks, with a one-hour session each week. I repurposed the zmq wrapper from the robot and gave the RPis static addresses. But each time the lads came in, we ended up with different addresses and so on, and there was a lot of "type *these* numbers in instead of *those* numbers" going on. [picture of confused network setup]

9) So I thought: there are two things we need to do here which are particular to this kind of club situation -- and which would be similar in a CoderDojo or a classroom. [picture of club/classroom IT]

10) a) have a simple way of discovering the other machine you're talking to; [beacon]

11) and b) have a straightforward pattern of sending messages and perhaps receiving answers. [messaging]

12) and, ideally, have these work in a robust way cross-platform with at least Windows, Mac OS/X, Linux/RPi [3 x OS logos]

13) Neither of these is a blindingly new problem; and the second already has some reasonable solutions -- including ZeroMQ itself, or even native sockets -- depending on how much pain you're prepared to put up with especially as you go cross-platform. But I'm focusing on the particular constraints of a tight timeframe and relatively inexperienced -- and probably young -- learners. [

14) So I created NetworkZero [networkzero readthedocs page]

15) The "Zero" suffix is in relation to the already existing PyGame Zero and GPIOZero (and there have been some more since including GUIZero). The idea is to make Python packages which are built on powerful libraries but which provide an easier entry point for beginners, typically by avoiding some noisy boilerplate which clutters what would otherwise be simple code. [logos/headings for PyGame Zero, GPIO Zero]

16) How do you use networkzero [nw0]? In its simplest form, you obtain an address by advertising the name of a service and then you listen on that address for requests which you then act on and reply. Someone wanting to talk to your program will obtain an address by searching for the name of the service and will send a request to that address and receive a reply. [example code]

17) And that's it. It actually does more than this, but this is the heart of networkzero: simple network code round which you can create a standalone program, or which you can use to sprinkle some network glitter on top of an existing project. [image of magic wand / network icons]

18) Live Demo!

19) What are its strengths?

    a) Very straightforward to use
    b) Works unchanged on Python 2.7 & 3.3+ and on Windows, Mac, Linux / RPi
    c) Send & receive any built-in type, not just strings
    d) Request / Reply + Publish / Subscribe
    e) Designed to be fairly robust in the face of odd network setups, frequent stop/start etc.
    f) Threadsafe, which  means you can integrate with GPIOZero callbacks
    g) Fully tested with new changes tested across all platforms (h/t Tom Viner)
    h) Can use either component (discovery / messaging) independently but work well together

20) What are its weaknesses?

    a) Hard dependencies on ZeroMQ & netifaces (both good & bad)
    b) It's a little further away from basic socket programming so takes away from the learning experience
    c) Still some corner cases where it hangs etc.

21) Particular challenges while creating the library

    a) BT DNS redirect! [Trying to resolve a hostname, BT internet succeeds but goes its own page!]
    b) Sockets on different platforms (lingering, timeouts, broadcast addresses etc.)
    c) in-out-in-out on the messaging functionality (did you hear what happened when the chap died who invented the hokey-cokey? They were putting him into the coffin and they got the left leg in and it all went horribly wrong...)
    d) Marshal vs JSON vs whatever...


* What are the benefits? [smiley face]
    - It's deliberately straightforward to use
    - It works unchanged across all major platforms: Windows, Mac OS/X, Linux/RPi [logos of platforms]
    - It works on Python 2.7 and 3.3+
    - You can send and receive any builtin Python type, not just strings
    - As well as request-reply there's also a publish-subscribe mode (eg for data capture)
    - The discovery mechanism works very hard to cope with restarted processes, odd network configurations, platform differences etc.
    - It is threadsafe, which essentially means you can integrate it with GPIOZero callbacks [GPIOZero logo]
    - It's thoroughly tested, with new changes tested across all supported platforms via Appveyor and Travis (thanks, Tom Viner!)

* What are the drawbacks? [sad face]
    - It currently has hard dependencies on zeromq and netifaces
    - It's a little further away from basic socket programming so takes away from the learning experience
    - It's still possible to meet corner cases where it hangs etc.

* Why should I use networkzero? (I'm assuming you're an educator of some sort because that's who the package is aimed at). Two different questions, not unrelated: why should I use networking at all? if I do, why should I use networkzero as opposed to rolling my own socket code?

* Why networking at all? Because networking is an integral part of how computers are used nowadays [internet of things]

* -- and it can add an extra layer of interest to an otherwise simple package. [kid looking wowed]

* Why networkzero? Because it should make it easy for you to add networking without wasting a lot of time on some of the underlying issues: what address the machine has; whether you're blocking on a receive or a send; socket timeouts and orphaned sockets when processes crash out. [some networkzero code]

* What challenges did you face / are you still facing in its development? [picture of climbing a rockface]

    - BT DNS redirect!
    - socket lingering on different platforms
    -
    - Using marshal/json/strings